pipeline {
    agent any

    environment {
        IMAGE_NAME = 'sanjeevkt720/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        RELEASE_TAG = "0.1.4"
        KUBECONFIG = credentials('kubeconfig-credentials-id')
        GH_TOKEN = credentials('github-token')
   
        
    }



    stages {

        stage('printenv') {

            steps {
                script {
                    sh "printenv"
                    sh "poetry install --with dev"
                    sh "poetry run semantic-release version"

                    def releaseOutput = sh(script: 'poetry run semantic-release publish', returnStdout: true).trim()
                    
                    // Extract the tag and commit from the release output
                    def tagMatches = (releaseOutput =~ /(?<=Published version: )[\S]+/)
                    def commitMatches = (releaseOutput =~ /(?<=with commit: )[\S]+/)
                    def newTag = tagMatches ? tagMatches[0] : null
                    def newCommit = commitMatches ? commitMatches[0] : null

                    
                    if (!newTag || !newCommit) {
                        error("Failed to determine new tag or commit from semantic-release output.")
                    }
                    
                    // Store the newTag and newCommit in the environment for later stages
                    env.NEW_TAG = newTag
                    env.NEW_COMMIT = newCommit

                    echo "Published new tag: ${env.NEW_TAG}, commit: ${env.NEW_COMMIT}"
                }
            }
        }

        stage("Check for Git Tag") {
            steps {
                script {
                    def tag = sh(returnStdout: true, script: "git tag --contains").trim()

                    if (tag != null) {
                        env.GIT_TAG = tag
                    } else {
                        env.GIT_TAG = ''
                    }
                    echo "GIT_TAG is set to: ${env.GIT_TAG}"
                }
            }
        }

        stage("Deployment") {
            when {
                expression {
                    return env.GIT_TAG != "" // Only run if GIT_TAG is not empty
                }
            }

            steps {
                echo "yeah we detected a tag: ${GIT_TAG}"

            }
        }

    }

}